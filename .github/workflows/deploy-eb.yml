name: Deploy to Elastic Beanstalk

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  id-token: write     # OIDC
  contents: read

env:
  AWS_REGION: eu-west-3
  EB_APP: Rcvo-backend
  EB_ENV: rcvo-backend-b
  EB_BUCKET: elasticbeanstalk-eu-west-3-409818814260
  ROLE_ARN: arn:aws:iam::409818814260:role/GithubDeployRole

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          audience: sts.amazonaws.com
          output-env-credentials: true

      - name: Tooling
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq zip

      - name: Package app (zip)
        run: |
          zip -r app.zip . -x ".git/*" ".github/*" "node_modules/*"

      - name: Upload to S3 (unique key)
        run: |
          KEY="${EB_APP}/ops-deploy-${GITHUB_RUN_ID}-${GITHUB_RUN_ATTEMPT}.zip"
          echo "S3_KEY=$KEY" >> $GITHUB_ENV
          aws s3 cp app.zip "s3://${EB_BUCKET}/${KEY}"

      - name: Create EB Application Version (process) — always unique
        run: |
          LABEL="ops-deploy-${GITHUB_RUN_ID}-${GITHUB_RUN_ATTEMPT}"
          echo "LABEL=$LABEL" >> $GITHUB_ENV
          aws elasticbeanstalk create-application-version \
            --application-name "$EB_APP" \
            --version-label "$LABEL" \
            --source-bundle S3Bucket="$EB_BUCKET",S3Key="$S3_KEY" \
            --process

      - name: Update Environment
        run: |
          aws elasticbeanstalk update-environment \
            --environment-name "$EB_ENV" \
            --version-label "$LABEL"

      - name: Wait until Ready/Green (≤15 min)
        timeout-minutes: 16
        run: |
          end=$((SECONDS+900))
          while [ $SECONDS -lt $end ]; do
            read -r S H V < <(aws elasticbeanstalk describe-environments \
              --environment-names "$EB_ENV" \
              --query 'Environments[0].[Status,Health,VersionLabel]' \
              --output text)
            echo "Status=$S Health=$H Version=$V"
            if [[ "$S" == "Ready" && "$V" == "$LABEL" && "$H" =~ ^(Green|Yellow)$ ]]; then
              echo "✅ Déployé: $LABEL ($H)"; exit 0
            fi
            sleep 10
          done
          echo "❌ Timeout en attente de Ready/Green pour $LABEL"; exit 1

      - name: EB events (si échec)
        if: failure()
        run: |
          aws elasticbeanstalk describe-events \
            --environment-name "$EB_ENV" \
            --start-time "$(date -u -d '30 minutes ago' +%FT%TZ)" \
            --query 'reverse(Events)[].[EventDate,Severity,Message]' \
            --output table
