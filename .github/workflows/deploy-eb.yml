name: Deploy to Elastic Beanstalk
on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy to Elastic Beanstalk
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install jq (used for debugging if needed)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: Detect UI presence (./ui/package.json)
        id: detect_ui
        run: |
          if [ -f "./ui/package.json" ]; then
            echo "ui_present=true" >> "$GITHUB_OUTPUT"
          else
            echo "ui_present=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Setup Node.js (if UI present)
        if: steps.detect_ui.outputs.ui_present == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Build frontend (if UI present)
        if: steps.detect_ui.outputs.ui_present == 'true'
        run: |
          cd ui
          npm ci
          npm run build --if-present

      - name: Create stable snapshot tarball (safe, in temp dir)
        id: make_tar
        run: |
          set -euo pipefail
          TMPDIR=$(mktemp -d)
          ARCHIVE_NAME="rcvo-deploy-$(date +%Y%m%d-%H%M%S).tar.gz"
          ARCHIVE_PATH="$TMPDIR/$ARCHIVE_NAME"
          echo "Creating archive: $ARCHIVE_PATH"
          # Exclude .git and node_modules to reduce size; adapte si besoin
          tar --exclude='.git' --exclude='node_modules' --exclude='ui/node_modules' -czf "$ARCHIVE_PATH" .
          echo "archive_path=$ARCHIVE_PATH" >> "$GITHUB_OUTPUT"
          echo "archive_name=$ARCHIVE_NAME" >> "$GITHUB_OUTPUT"
        # pas besoin d'env AWS ici

      - name: Upload tarball to S3 (STANDARD) and verify
        id: upload_s3
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          S3_BUCKET:_
