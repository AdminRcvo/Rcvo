name: Deploy to Elastic Beanstalk

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]   # ← adapte si besoin

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: eu-west-3
      EB_APP: Rcvo-backend
      EB_ENV: rcvo-backend-b
      EB_BUCKET: elasticbeanstalk-eu-west-3-409818814260
      ROLE_ARN: arn:aws:iam::409818814260:role/GithubDeployRole

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Package app (zip) + export LABEL
        shell: bash
        run: |
          set -Eeuo pipefail
          LABEL="ops-deploy-$(date +%Y%m%d-%H%M%S)-${GITHUB_RUN_NUMBER}"
          S3_KEY="${{ env.EB_APP }}/${LABEL}.zip"
          echo "→ LABEL=$LABEL"
          zip -r "$LABEL.zip" . >/dev/null
          # partage aux prochains steps
          echo "LABEL=$LABEL"   >> "$GITHUB_ENV"
          echo "S3_KEY=$S3_KEY" >> "$GITHUB_ENV"

      - name: Upload to S3 (unique key)
        shell: bash
        run: |
          set -Eeuo pipefail
          aws s3 cp "$LABEL.zip" "s3://${{ env.EB_BUCKET }}/$S3_KEY"

      - name: Create EB Application Version (process) — always unique
        shell: bash
        run: |
          set -Eeuo pipefail
          aws elasticbeanstalk create-application-version \
            --application-name "${{ env.EB_APP }}" \
            --version-label "$LABEL" \
            --source-bundle S3Bucket="${{ env.EB_BUCKET }}",S3Key="$S3_KEY" \
            --process

      - name: Update Environment
        shell: bash
        run: |
          set -Eeuo pipefail
          # petit pré-check Ready pour éviter l’erreur "Must be Ready"
          end=$((SECONDS+600))
          while [ $SECONDS -lt $end ]; do
            read -r S H V < <(aws elasticbeanstalk describe-environments \
              --application-name "${{ env.EB_APP }}" \
              --environment-names "${{ env.EB_ENV }}" \
              --query 'Environments[0].[Status,Health,VersionLabel]' --output text)
            echo "Pre-check  Status=$S Health=$H Version=$V"
            [ "$S" = "Ready" ] && break
            sleep 8
          done
          aws elasticbeanstalk update-environment \
            --application-name "${{ env.EB_APP }}" \
            --environment-name "${{ env.EB_ENV }}" \
            --version-label "$LABEL"

      - name: Wait until Ready/Green (≤15 min)
        shell: bash
        run: |
          set -Eeuo pipefail
          echo "⏳ Attente env=${{ env.EB_ENV }} -> Ready/(Green|Yellow|Ok) sur label=$LABEL"
          end=$((SECONDS+900))
          last=""
          while [ $SECONDS -lt $end ]; do
            read -r S H V < <(aws elasticbeanstalk describe-environments \
              --application-name "${{ env.EB_APP }}" \
              --environment-names "${{ env.EB_ENV }}" \
              --query 'Environments[0].[Status,Health,VersionLabel]' --output text)
            printf 'Status=%s Health=%s VersionLabel=%s (attendu=%s)\n' "$S" "$H" "$V" "$LABEL"
            if [[ "$S" == "Ready" && "$V" == "$LABEL" && "$H" =~ ^(Green|Yellow|Ok)$ ]]; then
              echo "✅ Déployé: $LABEL (Health=$H)"
              exit 0
            fi
            last="Status=$S Health=$H Version=$V"
            sleep 10
          done
          echo "⛔ Timeout 15 min. Last=$last"
          echo "— Derniers events EB —"
          aws elasticbeanstalk describe-events \
            --environment-name "${{ env.EB_ENV }}" \
            --start-time "$(date -u -d '25 minutes ago' +%FT%TZ)" \
            --query 'reverse(Events)[].[EventDate,Severity,Message]' --output table || true
          exit 1

      - name: Post Configure AWS credentials (OIDC)
        if: ${{ always() }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
