name: Deploy to Elastic Beanstalk

on:
  push:
    branches: [ main ]      # change si besoin
  workflow_dispatch:

env:
  AWS_REGION: eu-west-3
  APP: Rcvo-backend
  ENV: rcvo-backend-b
  BUCKET: elasticbeanstalk-eu-west-3-409818814260

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::409818814260:role/GithubDeployRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Tooling
        run: |
          sudo apt-get update -y
          sudo apt-get install -y zip jq

      - name: Package app
        run: |
          rm -f app.zip
          zip -r app.zip . -x ".git/*" ".github/*"

      - name: Upload to S3 (unique key)
        id: upload
        run: |
          LABEL="ops-deploy-${{ github.run_id }}-${{ github.run_number }}"
          S3KEY="${APP}/${LABEL}.zip"
          aws s3 cp app.zip "s3://${BUCKET}/${S3KEY}"
          echo "LABEL=$LABEL" >> $GITHUB_OUTPUT
          echo "S3KEY=$S3KEY" >> $GITHUB_OUTPUT

      - name: Create EB Application Version (process)
        run: |
          aws elasticbeanstalk create-application-version \
            --application-name "${APP}" \
            --version-label "${{ steps.upload.outputs.LABEL }}" \
            --source-bundle S3Bucket="${BUCKET}",S3Key="${{ steps.upload.outputs.S3KEY }}" \
            --process

      - name: Update Environment
        run: |
          aws elasticbeanstalk update-environment \
            --environment-name "${ENV}" \
            --version-label "${{ steps.upload.outputs.LABEL }}"

      - name: Wait until Ready/Green (≤15 min)
        run: |
          end=$(( $(date +%s) + 900 ))
          while [ $(date +%s) -lt $end ]; do
            read -r S H V < <(aws elasticbeanstalk describe-environments \
              --environment-names "${ENV}" \
              --query 'Environments[0].[Status,Health,VersionLabel]' --output text)
            echo "Status=$S Health=$H Version=$V"
            if [[ "$S" == "Ready" && "$V" == "${{ steps.upload.outputs.LABEL }}" && "$H" =~ ^(Green|Yellow)$ ]]; then
              echo "✅ Deployed: $V ($H)"; exit 0
            fi
            sleep 10
          done
          echo "❌ Timeout waiting for Ready/Green"; exit 1
