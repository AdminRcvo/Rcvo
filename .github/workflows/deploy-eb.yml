name: EB Deploy (manuel)

on:
  workflow_dispatch:
    inputs:
      env_name:
        description: "Nom de l'environnement EB (ex: rcvo-backend-b / Rcvo-UI-prod / Rcvo-Backend-staging)"
        required: true
        default: rcvo-backend-b

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: eu-west-3

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      # Optionnel : crée une archive du dossier courant (si ton app en a besoin)
      - name: Pack current code
  shell: bash
  run: |
    set -euo pipefail
    mkdir -p bundle
    # Empêche d’inclure le dossier où l’archive est créée + le repo .git
    tar --exclude='./bundle' --exclude='.git' -czf bundle/app.tar.gz .


      # Crée une version EB idempotente (avec un label unique)
      - name: Create EB application version
        shell: bash
        run: |
          set -euo pipefail
          ENV_NAME="${{ inputs.env_name }}"
          : "${ENV_NAME:?env_name est vide}"
          VERSION_LABEL="deploy-$(date +%s)-${GITHUB_SHA::8}"

          # Upload vers le bucket S3 standard d'EB (il existe déjà)
          S3_BUCKET="elasticbeanstalk-${AWS_REGION}-${{ steps.sts.outputs.account_id }}"
          # Récupère l’ID de compte pour composer le bucket S3
        env:
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: Get AWS account id
        id: sts
        shell: bash
        run: |
          set -euo pipefail
          ACC=$(aws sts get-caller-identity --query Account --output text)
          echo "account_id=$ACC" >> "$GITHUB_OUTPUT"

      - name: Upload & register version
        id: mkver
        shell: bash
        run: |
          set -euo pipefail
          ENV_NAME="${{ inputs.env_name }}"
          : "${ENV_NAME:?env_name est vide}"

          APP_NAME=$(aws elasticbeanstalk describe-environments \
            --environment-names "$ENV_NAME" \
            --query 'Environments[0].ApplicationName' --output text)

          VERSION_LABEL="deploy-$(date +%s)-${GITHUB_SHA::8}"
          S3_BUCKET="elasticbeanstalk-${AWS_REGION}-${{ steps.sts.outputs.account_id }}"
          S3_KEY="archive/${APP_NAME}/${VERSION_LABEL}.tar.gz"

          echo "App: $APP_NAME"
          echo "Version: $VERSION_LABEL"
          echo "S3: s3://${S3_BUCKET}/${S3_KEY}"

          # Upload de l’archive
          aws s3 cp bundle/app.tar.gz "s3://${S3_BUCKET}/${S3_KEY}"

          # Enregistre la version EB (idempotent)
          aws elasticbeanstalk create-application-version \
            --application-name "$APP_NAME" \
            --version-label "$VERSION_LABEL" \
            --source-bundle S3Bucket="${S3_BUCKET}",S3Key="${S3_KEY}" \
            || echo "Version déjà existante, on continue."

          echo "version_label=$VERSION_LABEL" >> "$GITHUB_OUTPUT"

      - name: Deploy new version to EB environment
        shell: bash
        run: |
          set -euo pipefail
          ENV_NAME="${{ inputs.env_name }}"
          : "${ENV_NAME:?env_name est vide}"
          VERSION_LABEL="${{ steps.mkver.outputs.version_label }}"

          echo "Déploiement ${VERSION_LABEL} -> ${ENV_NAME}"
          aws elasticbeanstalk update-environment \
            --environment-name "$ENV_NAME" \
            --version-label "$VERSION_LABEL"
