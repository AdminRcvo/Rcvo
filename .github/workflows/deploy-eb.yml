name: Deploy to Elastic Beanstalk

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create dereferenced tarball
        run: |
          set -euo pipefail
          TS=$(date +%Y%m%d-%H%M%S)
          OUT="rcvo-deploy-${TS}.tar.gz"
          tar --dereference --exclude='./node_modules' --exclude='./.git' --exclude='*.log' -czf "$OUT" .
          echo "TARBALL=$OUT" >> $GITHUB_ENV

      - name: Upload tarball to S3 and verify STANDARD storage class
        env:
          BUCKET: ${{ secrets.S3_BUCKET }}
          REGION: ${{ secrets.AWS_REGION }}
        run: |
          set -euo pipefail
          OUT="$TARBALL"
          S3_KEY="rcvo-backend/$OUT"
          aws s3 cp "$OUT" "s3://$BUCKET/$S3_KEY" --storage-class STANDARD --region "$REGION" --no-progress
          SC=$(aws s3api head-object --bucket "$BUCKET" --key "$S3_KEY" --region "$REGION" --query 'StorageClass' --output text 2>/dev/null || echo "null")
          if [ -z "$SC" ] || [ "$SC" = "None" ] || [ "$SC" = "null" ]; then SC="STANDARD"; fi
          if [ "$SC" != "STANDARD" ]; then
            echo "ERROR: uploaded object storage class is NOT STANDARD (detected: $SC)" >&2
            exit 1
          fi
          echo "Uploaded and verified S3 object is STANDARD: s3://$BUCKET/$S3_KEY"
        shell: bash

      - name: Create EB application version
        env:
          APP: ${{ secrets.EB_APP_NAME }}
          BUCKET: ${{ secrets.S3_BUCKET }}
          REGION: ${{ secrets.AWS_REGION }}
        run: |
          TS=$(date +%Y%m%d-%H%M%S)
          OUT="$TARBALL"
          S3_KEY="rcvo-backend/$OUT"
          VERSION_LABEL="gha-${TS}"
          aws elasticbeanstalk create-application-version \
            --application-name "$APP" \
            --version-label "$VERSION_LABEL" \
            --source-bundle S3Bucket="$BUCKET",S3Key="$S3_KEY" \
            --region "$REGION"
          echo "VERSION_LABEL=$VERSION_LABEL" >> $GITHUB_ENV

      - name: Deploy to EB environment
        env:
          ENV: ${{ secrets.EB_ENV_NAME }}
          REGION: ${{ secrets.AWS_REGION }}
        run: |
          aws elasticbeanstalk update-environment --environment-name "$ENV" --version-label "$VERSION_LABEL" --region "$REGION"
          echo "Deploy requested: $VERSION_LABEL"
