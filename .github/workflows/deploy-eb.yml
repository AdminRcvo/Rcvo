name: RCVO — Déploiement EB (clone / rollback)

on:
  workflow_dispatch:
    inputs:
      mode:
        description: "clone = nouveau label depuis le bundle actuel | rollback = revenir à la version précédente"
        required: true
        default: "clone"
        type: choice
        options: [clone, rollback]
      label_override:
        description: "Label personnalisé (facultatif, ex: ops-release-20251021-155033)"
        required: false
        default: ""

permissions:
  id-token: write   # OIDC → STS
  contents: read

env:
  AWS_REGION: eu-west-3
  EB_APP: Rcvo-backend
  EB_ENV: rcvo-backend-b
  EB_BUCKET: elasticbeanstalk-eu-west-3-409818814260
  ROLE_ARN: arn:aws:iam::409818814260:role/GithubDeployRole
  AWS_PAGER: ""   # pas de pagination dans les steps

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 40

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Outils (jq) + vérification AWS CLI
        shell: bash
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y jq
          if ! command -v aws >/dev/null 2>&1; then
            echo "aws CLI manquant -> installation v2 (fallback)…"
            curl -sSL "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o awscliv2.zip
            unzip -q awscliv2.zip
            sudo ./aws/install --update
          fi
          aws --version
          jq --version

      - name: Déployer (clone du bundle courant)
        if: inputs.mode == 'clone'
        shell: bash
        run: |
          set -euo pipefail
          REGION="${AWS_REGION}"
          APP="${EB_APP}"
          ENV="${EB_ENV}"
          BUCKET="${EB_BUCKET}"

          # Récupère la version en place et son bundle S3
          CUR=$(aws elasticbeanstalk describe-environments --region "$REGION" \
            --environment-names "$ENV" --query 'Environments[0].VersionLabel' --output text)
          SRC_KEY=$(aws elasticbeanstalk describe-application-versions --region "$REGION" \
            --application-name "$APP" --version-labels "$CUR" \
            --query 'ApplicationVersions[0].SourceBundle.S3Key' --output text)

          # Label
          LABEL="${{ github.event.inputs.label_override }}"
          if [ -z "$LABEL" ]; then LABEL="ops-deploy-$(date +%Y%m%d-%H%M%S)-$RANDOM"; fi
          echo "→ New label: $LABEL (source: s3://$BUCKET/$SRC_KEY)"

          # Crée l'AppVersion (process) + bascule
          aws elasticbeanstalk create-application-version --region "$REGION" \
            --application-name "$APP" --version-label "$LABEL" \
            --source-bundle S3Bucket="$BUCKET",S3Key="$SRC_KEY" --process

          aws elasticbeanstalk update-environment --region "$REGION" \
            --environment-name "$ENV" --version-label "$LABEL"

          # Watch jusqu’à Ready & (Green|Yellow)
          end=$((SECONDS+1200))
          while [ $SECONDS -lt $end ]; do
            read -r S H V < <(aws elasticbeanstalk describe-environments --region "$REGION" \
              --environment-names "$ENV" --query 'Environments[0].[Status,Health,VersionLabel]' --output text)
            echo "EB Status=$S Health=$H VersionLabel=$V"
            if [[ "$S" == "Ready" && "$V" == "$LABEL" && "$H" =~ ^(Green|Yellow)$ ]]; then
              echo "✅ Déployé: $LABEL ($H)"; exit 0; fi
            sleep 10
          done
          echo "⚠️ Timeout en attente de Ready/Green"; exit 1

      - name: Rollback (vers la version précédente)
        if: inputs.mode == 'rollback'
        shell: bash
        run: |
          set -euo pipefail
          REGION="${AWS_REGION}"
          APP="${EB_APP}"
          ENV="${EB_ENV}"

          CUR=$(aws elasticbeanstalk describe-environments --region "$REGION" \
            --environment-names "$ENV" --query 'Environments[0].VersionLabel' --output text)
          PREV=$(aws elasticbeanstalk describe-application-versions --region "$REGION" --application-name "$APP" \
            --query 'reverse(sort_by(ApplicationVersions,&DateCreated))[*].VersionLabel' --output text \
            | tr '\t' '\n' | grep -v "^$CUR$" | head -n1)

          if [ -z "$PREV" ]; then echo "Aucune version précédente trouvée"; exit 1; fi
          echo "→ Rollback vers: $PREV"

          aws elasticbeanstalk update-environment --region "$REGION" \
            --environment-name "$ENV" --version-label "$PREV"

          end=$((SECONDS+1200))
          while [ $SECONDS -lt $end ]; do
            read -r S H V < <(aws elasticbeanstalk describe-environments --region "$REGION" \
              --environment-names "$ENV" --query 'Environments[0].[Status,Health,VersionLabel]' --output text)
            echo "EB Status=$S Health=$H VersionLabel=$V"
            if [[ "$S" == "Ready" && "$V" == "$PREV" && "$H" =~ ^(Green|Yellow)$ ]]; then
              echo "✅ Rollback OK: $PREV ($H)"; exit 0; fi
            sleep 10
          done
          echo "⚠️ Timeout en attente de Ready/Green"; exit 1
