name: Deploy to Elastic Beanstalk

on:
  push:
    branches:
      - main

permissions:
  contents: read

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  S3_BUCKET: ${{ secrets.S3_BUCKET }}
  EB_APPLICATION_NAME: ${{ secrets.EB_APPLICATION_NAME }}
  EB_ENVIRONMENT_NAME: ${{ secrets.EB_ENVIRONMENT_NAME }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          # optional session token
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN || '' }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Node.js (for frontend build if present)
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Check for UI (detect ./ui/package.json)
        id: check-ui
        run: |
          set -euo pipefail
          if [ -f "./ui/package.json" ]; then
            echo "ui_exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "ui_exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Build frontend (if exists)
        if: ${{ steps.check-ui.outputs.ui_exists == 'true' }}
        working-directory: ./ui
        run: |
          set -euo pipefail
          npm ci
          npm run build || true

      - name: Create dereferenced stable tarball (snapshot)
        id: make_tar
        run: |
          set -euo pipefail
          echo "Creating stable snapshot tarball..."
          # Prepare names
          TIMESTAMP=$(date -u +%Y%m%d%H%M%S)
          TAR_NAME="rcvo-deploy-${TIMESTAMP}.tar.gz"
          # Prepare tmp snapshot dir
          TMPDIR=$(mktemp -d)
          SNAP="$TMPDIR/export"
          mkdir -p "$SNAP"
          # Copy workspace into snapshot excluding .git, node_modules and github actions temp files
          rsync -a --delete \
            --exclude='.git' \
            --exclude='.github' \
            --exclude='node_modules' \
            --exclude='*.tar.gz' \
            --exclude='*.log' \
            ./ "$SNAP/"
          # if ui build exists, ensure built assets included (already in ./ui if built)
          # Create tarball from the snapshot (stable)
          tar -C "$SNAP" -czf "$TAR_NAME" .
          # expose outputs
          echo "archive_name=$TAR_NAME" >> "$GITHUB_OUTPUT"
          echo "archive_path=$PWD/$TAR_NAME" >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Upload tarball to S3 (STANDARD)
        id: upload_s3
        run: |
          set -euo pipefail
          ARCHIVE_PATH="${{ steps.make_tar.outputs.archive_path }}"
          ARCHIVE_NAME="${{ steps.make_tar.outputs.archive_name }}"
          S3_KEY="rcvo-backend/${ARCHIVE_NAME}"
          echo "Uploading ${ARCHIVE_NAME} to s3://${{ env.S3_BUCKET }}/${S3_KEY} (STANDARD)"
          aws s3 cp "$ARCHIVE_PATH" "s3://${{ env.S3_BUCKET }}/${S3_KEY}" --storage-class STANDARD --region "${{ env.AWS_REGION }}"
          # get head-object to confirm
          aws s3api head-object \
            --bucket "${{ env.S3_BUCKET }}" \
            --key "${S3_KEY}" \
            --region "${{ env.AWS_REGION }}" \
            --query '{Key:Key,StorageClass:StorageClass,Size:ContentLength}' > s3_head.json
          echo "s3_key=${S3_KEY}" >> "$GITHUB_OUTPUT"
          echo "s3_head=$(cat s3_head.json | tr '\n' ' ')" >> "$GITHUB_OUTPUT"

      - name: Create EB application version
        id: create_app_version
        run: |
          set -euo pipefail
          if [ -z "${{ env.EB_APPLICATION_NAME }}" ]; then
            echo "ERROR: EB_APPLICATION_NAME is empty. Please set repository secret EB_APPLICATION_NAME."
            exit 2
          fi
          if [ -z "${{ steps.upload_s3.outputs.s3_key }}" ]; then
            echo "ERROR: s3_key is empty. Upload failed earlier?"
            exit 3
          fi
          VERSION_LABEL="gh-${GITHUB_RUN_ID}-${GITHUB_RUN_NUMBER}-${{ github.sha::8 }}"
          S3_KEY="${{ steps.upload_s3.outputs.s3_key }}"
          echo "Creating application version ${VERSION_LABEL} pointing to s3://${{ env.S3_BUCKET }}/${S3_KEY}"
          aws elasticbeanstalk create-application-version \
            --application-name "${{ env.EB_APPLICATION_NAME }}" \
            --version-label "${VERSION_LABEL}" \
            --source-bundle S3Bucket="${{ env.S3_BUCKET }}",S3Key="${S3_KEY}" \
            --auto-create-application \
            --region "${{ env.AWS_REGION }}"
          echo "version_label=${VERSION_LABEL}" >> "$GITHUB_OUTPUT"

      - name: Wait for application version visibl
