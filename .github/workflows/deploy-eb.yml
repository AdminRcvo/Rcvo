name: Deploy to Elastic Beanstalk

# ‚úÖ OIDC requis pour assumer le r√¥le IAM depuis GitHub
permissions:
  id-token: write
  contents: read

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]   # change si besoin

concurrency:
  group: eb-${{ github.ref }}
  cancel-in-progress: true

env:
  AWS_REGION: eu-west-3
  AWS_DEFAULT_REGION: eu-west-3

  # ‚ùóÔ∏èAdapte si n√©cessaire (noms EB existants)
  EB_APP: Rcvo-backend
  EB_ENV: rcvo-backend-b
  EB_BUCKET: elasticbeanstalk-eu-west-3-409818814260

  # R√¥le IAM OIDC d√©j√† cr√©√© dans ton compte
  ROLE_ARN: arn:aws:iam::409818814260:role/GithubDeployRole

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          audience: sts.amazonaws.com
          output-env-credentials: true

      - name: WhoAmI (debug)
        run: aws sts get-caller-identity

      - name: Package app (zip)
        shell: bash
        run: |
          set -euo pipefail
          rm -f app.zip
          # üß∞ Emballe tout le d√©p√¥t sauf .git et gros artefacts
          zip -r app.zip . \
            -x "*/.git/*" ".git/*" "*.git*" \
            -x "node_modules/*" "*/node_modules/*" || true
          ls -lh app.zip

      - name: Upload to S3 (unique key)
        id: upload
        shell: bash
        env:
          EB_APP: ${{ env.EB_APP }}
          EB_BUCKET: ${{ env.EB_BUCKET }}
        run: |
          set -euo pipefail
          LABEL="ops-deploy-$(date +%Y%m%d-%H%M%S)-${GITHUB_RUN_ID}-${GITHUB_RUN_ATTEMPT}"
          KEY="${EB_APP}/${LABEL}.zip"
          aws s3 cp app.zip "s3://${EB_BUCKET}/${KEY}"
          echo "label=${LABEL}"     >> "$GITHUB_OUTPUT"
          echo "key=${KEY}"         >> "$GITHUB_OUTPUT"
          echo "‚úÖ Uploaded s3://${EB_BUCKET}/${KEY}"

      - name: Create EB Application Version (process) ‚Äî always unique
        shell: bash
        env:
          EB_APP: ${{ env.EB_APP }}
          EB_BUCKET: ${{ env.EB_BUCKET }}
          LABEL: ${{ steps.upload.outputs.label }}
          KEY: ${{ steps.upload.outputs.key }}
        run: |
          set -euo pipefail
          aws elasticbeanstalk create-application-version \
            --application-name "$EB_APP" \
            --version-label "$LABEL" \
            --source-bundle S3Bucket="$EB_BUCKET",S3Key="$KEY" \
            --process
          echo "‚úÖ AppVersion $LABEL (processing demand√©)"

      - name: Update Environment
        shell: bash
        env:
          EB_ENV: ${{ env.EB_ENV }}
          LABEL: ${{ steps.upload.outputs.label }}
        run: |
          set -euo pipefail
          # Attendre que l'env soit "Ready" avant de pousser l'update (s√©curisant)
          t0=$SECONDS
          while :; do
            read -r S H V < <(aws elasticbeanstalk describe-environments \
              --environment-names "$EB_ENV" \
              --query 'Environments[0].[Status,Health,VersionLabel]' --output text)
            echo "EB now: Status=$S Health=$H Version=$V"
            [[ "$S" == "Ready" ]] && break
            (( SECONDS - t0 > 600 )) && { echo "‚è∞ Timeout env not Ready"; exit 1; }
            sleep 8
          done
          aws elasticbeanstalk update-environment \
            --environment-name "$EB_ENV" \
            --version-label "$LABEL"
          echo "üöÄ Bascule demand√©e vers $LABEL"

      - name: Wait until Ready/Green (‚â§15 min)
        shell: bash
        env:
          EB_ENV: ${{ env.EB_ENV }}
          LABEL: ${{ steps.upload.outputs.label }}
        run: |
          set -euo pipefail
          end=$((SECONDS+900))
          while [ $SECONDS -lt $end ]; do
            read -r S H V < <(aws elasticbeanstalk describe-environments \
              --environment-names "$EB_ENV" \
              --query 'Environments[0].[Status,Health,VersionLabel]' --output text)
            echo "Status=$S Health=$H Version=$V"
            if [[ "$S" == "Ready" && "$V" == "$LABEL" && "$H" =~ ^(Green|Yellow)$ ]]; then
              echo "‚úÖ D√©ploy√©: $LABEL (Health=$H)"
              exit 0
            fi
            sleep 10
          done
          echo "‚è∞ Timeout en attente de Ready/Green sur $LABEL"
          exit 1

      - name: EB events (si √©chec)
        if: failure()
        shell: bash
        env:
          EB_ENV: ${{ env.EB_ENV }}
        run: |
          aws elasticbeanstalk describe-events \
            --environment-name "$EB_ENV" \
            --start-time "$(date -u -d '30 minutes ago' +%FT%TZ)" \
            --query 'reverse(Events)[].[EventDate,Severity,Message]' --output table || true
