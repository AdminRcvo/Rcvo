name: Deploy to Elastic Beanstalk

on:
  workflow_dispatch:
  push:
    branches:
      - main

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Node.js (for frontend build if present)
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Build frontend (if ui exists)
        run: |
          set -euo pipefail
          if [ -d ui ] && [ -f ui/package.json ]; then
            echo "ui detected — installing & building"
            cd ui
            npm ci
            npm run build --if-present
            cd -
          else
            echo "No ui folder or no package.json — skipping frontend build"
          fi

      - name: Create dereferenced tarball (stable snapshot)
        run: |
          set -euo pipefail

          TS=$(date +%Y%m%d-%H%M%S)
          OUT="rcvo-deploy-${TS}.tar.gz"
          echo "Creating stable snapshot for $OUT"

          # Create a temporary snapshot dir and dereference symlinks into it
          TMP_DIR=$(mktemp -d)
          echo "tmp: $TMP_DIR"

          # rsync -aL will copy files and dereference symlinks (-L).
          # Exclude heavy or unnecessary dirs/files (adjust if needed).
          rsync -aL --delete \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='*.log' \
            --exclude='*.zip' \
            --exclude='.github' \
            --exclude='.venv' \
            ./ "$TMP_DIR/"

          # create tarball inside TMP_DIR (prevents "file changed as we read it")
          OUTPATH="$TMP_DIR/$OUT"
          tar -C "$TMP_DIR" --warning=no-file-changed -czf "$OUTPATH" .

          # sanity check then move to workspace
          if [ ! -f "$OUTPATH" ]; then
            echo "ERROR: tarball not created at $OUTPATH" >&2
            exit 1
          fi

          mv "$OUTPATH" "$GITHUB_WORKSPACE/$OUT"

          # export for following steps
          echo "TARBALL=$OUT" >> "$GITHUB_ENV"

          # cleanup
          rm -rf "$TMP_DIR"
