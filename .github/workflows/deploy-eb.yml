name: Deploy to Elastic Beanstalk (clone current bundle)

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: eu-west-3
  EB_APP: Rcvo-backend
  EB_ENV: rcvo-backend-b
  EB_BUCKET: elasticbeanstalk-eu-west-3-409818814260
  ROLE_ARN: arn:aws:iam::409818814260:role/GithubDeployRole

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.ROLE_ARN }}
          audience: sts.amazonaws.com
          output-env-credentials: true

      - name: Clone current S3 bundle, create AppVersion and update env
        id: do-deploy
        shell: bash
        run: |
          set -Eeuo pipefail
          REGION="${AWS_REGION}"
          APP="${EB_APP}"
          ENVN="${EB_ENV}"

          echo "▶︎ Résolution version actuelle…"
          CUR_LABEL="$(aws elasticbeanstalk describe-environments --region "$REGION" \
                        --environment-names "$ENVN" --query 'Environments[0].VersionLabel' --output text)"
          if [[ -z "$CUR_LABEL" || "$CUR_LABEL" == "None" ]]; then
            echo "Aucune version courante trouvée"; exit 1
          fi

          read -r SRC_BUCKET SRC_KEY < <(aws elasticbeanstalk describe-application-versions --region "$REGION" \
            --application-name "$APP" --version-labels "$CUR_LABEL" \
            --query 'ApplicationVersions[0].[SourceBundle.S3Bucket,SourceBundle.S3Key]' --output text)

          if [[ -z "$SRC_BUCKET" || -z "$SRC_KEY" || "$SRC_BUCKET" == "None" || "$SRC_KEY" == "None" ]]; then
            echo "SourceBundle introuvable pour $CUR_LABEL"; exit 1
          fi
          echo "Source = s3://$SRC_BUCKET/$SRC_KEY"

          NEW_LABEL="ops-deploy-${{ github.run_id }}-${{ github.run_attempt }}"
          echo "▶︎ CreateApplicationVersion -> $NEW_LABEL"
          aws elasticbeanstalk create-application-version --region "$REGION" \
            --application-name "$APP" --version-label "$NEW_LABEL" \
            --source-bundle S3Bucket="$SRC_BUCKET",S3Key="$SRC_KEY" --process >/dev/null

          echo "▶︎ UpdateEnvironment -> $NEW_LABEL"
          aws elasticbeanstalk update-environment --region "$REGION" \
            --environment-name "$ENVN" --version-label "$NEW_LABEL" >/dev/null

          echo "new_label=$NEW_LABEL" >> "$GITHUB_OUTPUT"
          echo "cur_label=$CUR_LABEL"  >> "$GITHUB_OUTPUT"

      - name: Wait until Ready/(Green|Yellow) (≤10 min) with auto-rollback
        if: always()
        shell: bash
        env:
          NEW_LABEL: ${{ steps.do-deploy.outputs.new_label }}
          CUR_LABEL: ${{ steps.do-deploy.outputs.cur_label }}
        run: |
          set -Eeuo pipefail
          REGION="${AWS_REGION}"
          ENVN="${EB_ENV}"
          TARGET="${NEW_LABEL}"
          PREV="${CUR_LABEL}"

          echo "▶︎ Attente de Ready sur $TARGET (tolère Red transitoire)…"
          deadline=$(( $(date +%s) + 600 ))
          last=""

          while (( $(date +%s) < deadline )); do
            read -r ST H V < <(aws elasticbeanstalk describe-environments --region "$REGION" \
              --environment-names "$ENVN" --query 'Environments[0].[Status,Health,VersionLabel]' --output text)
            echo "Status=$ST Health=$H Version=$V"
            last="$ST/$H/$V"
            if [[ "$ST" == "Ready" && "$V" == "$TARGET" && "$H" =~ ^(Green|Yellow)$ ]]; then
              echo "✅ Déployé OK: $TARGET ($H)"; exit 0
            fi
            sleep 8
          done

          echo "❌ Toujours pas Ready/Green/Yellow pour $TARGET (dernier=$last). Rollback…"
          aws elasticbeanstalk update-environment --region "$REGION" \
            --environment-name "$ENVN" --version-label "$PREV" >/dev/null || true

          echo "▶︎ Attente du rollback (≤5 min)…"
          deadline=$(( $(date +%s) + 300 ))
          while (( $(date +%s) < deadline )); do
            read -r ST H V < <(aws elasticbeanstalk describe-environments --region "$REGION" \
              --environment-names "$ENVN" --query 'Environments[0].[Status,Health,VersionLabel]' --output text)
            echo "Status=$ST Health=$H Version=$V"
            if [[ "$ST" == "Ready" && "$V" == "$PREV" && "$H" =~ ^(Green|Yellow)$ ]]; then
              echo "↩️ Rollback OK -> $PREV ($H)"; break
            fi
            sleep 8
          done

          echo "▶︎ Events récents :"
          aws elasticbeanstalk describe-events --region "$REGION" --environment-name "$ENVN" \
            --start-time "$(date -u -d '20 minutes ago' +%FT%TZ)" \
            --query 'reverse(Events)[].[EventDate,Severity,Message]' --output table || true

          exit 1

      - name: Post Configure AWS credentials (OIDC)
        if: always()
        run: aws sts get-caller-identity --query Arn --output text || true
