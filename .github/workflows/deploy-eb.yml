name: EB Deploy

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ${{ vars.AWS_REGION || 'eu-west-3' }}
  APP_NAME: ${{ vars.EB_APP_NAME }}
  ENV_NAME: ${{ vars.EB_ENV_NAME }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Pack current code (tar.gz stable)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p bundle
          tar --exclude='./bundle' --exclude='.git' -czf bundle/app.tar.gz .

      - name: Get AWS account id
        id: acct
        shell: bash
        run: |
          set -euo pipefail
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "account_id=$ACCOUNT_ID" >> "$GITHUB_OUTPUT"

      - name: Compute S3 bucket & version label
        id: meta
        shell: bash
        run: |
          set -euo pipefail
          S3_BUCKET="elasticbeanstalk-${AWS_REGION}-${{ steps.acct.outputs.account_id }}"
          VERSION_LABEL="deploy-$(date +%Y%m%d-%H%M%S)"
          echo "bucket=$S3_BUCKET" >> "$GITHUB_OUTPUT"
          echo "version_label=$VERSION_LABEL" >> "$GITHUB_OUTPUT"

      - name: Upload to S3
        shell: bash
        run: |
          set -euo pipefail
          aws s3 cp bundle/app.tar.gz "s3://${{ steps.meta.outputs.bucket }}/${{ steps.meta.outputs.version_label }}.tar.gz"

      - name: Create EB application version (idempotent)
        shell: bash
        run: |
          set -euo pipefail
          echo "üß© Cr√©ation de la version EB ${APP_NAME}/${{ steps.meta.outputs.version_label }}"
          aws elasticbeanstalk create-application-version \
            --region "${AWS_REGION}" \
            --application-name "${APP_NAME}" \
            --version-label "${{ steps.meta.outputs.version_label }}" \
            --source-bundle S3Bucket="${{ steps.meta.outputs.bucket }}",S3Key="${{ steps.meta.outputs.version_label }}.tar.gz" \
          || echo "‚ÑπÔ∏è Version d√©j√† existante, on continue"

      - name: Update EB environment
        shell: bash
        run: |
          set -euo pipefail
          echo "üöÄ D√©ploiement ${{ steps.meta.outputs.version_label }} -> ${ENV_NAME}"
          aws elasticbeanstalk update-environment \
            --region "${AWS_REGION}" \
            --environment-name "${ENV_NAME}" \
            --version-label "${{ steps.meta.outputs.version_label }}"

      - name: Wait Ready/Green
        shell: bash
        run: |
          set -euo pipefail
          echo "‚è≥ Attente du statut 'Ready/Green'..."
          for i in {1..45}; do
            STATUS=$(aws elasticbeanstalk describe-environments \
              --region "${AWS_REGION}" \
              --environment-names "${ENV_NAME}" \
              --query "Environments[0].Health" --output text)
            echo "[$i] Statut : $STATUS"
            [[ "$STATUS" == "Green" || "$STATUS" == "Ready" ]] && break
            sleep 20
          done
          echo "‚úÖ D√©ploiement termin√© pour ${ENV_NAME}"

      - name: Optional HTTP health check
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          echo "üåç V√©rification de la disponibilit√©..."
          URL=$(aws elasticbeanstalk describe-environments \
            --region "${AWS_REGION}" \
            --environment-names "${ENV_NAME}" \
            --query "Environments[0].EndpointURL" --output text)
          curl -fsSL "http://${URL}/health" || echo "‚ö†Ô∏è Health check √©chou√©"

