name: Deploy to Elastic Beanstalk

on:
  workflow_dispatch:
  push:
    branches: [ main ]

permissions:
  id-token: write   # indispensable pour OIDC
  contents: read

concurrency:
  group: rcvo-eb-${{ github.ref }}
  cancel-in-progress: false

env:
  AWS_REGION: eu-west-3
  APP_NAME: Rcvo-backend
  ENV_NAME: rcvo-backend-b
  EB_BUCKET: elasticbeanstalk-eu-west-3-409818814260
  ROLE_ARN: arn:aws:iam::409818814260:role/GithubDeployRole

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Package app (zip)
        id: pkg
        shell: bash
        run: |
          set -euo pipefail
          ZIP="rcvo-${GITHUB_RUN_ID}-${GITHUB_RUN_ATTEMPT:-0}-${GITHUB_SHA::7}.zip"
          # adapte le contenu si besoin (exclusions, build, etc.)
          zip -r "$ZIP" . -x ".git/*" >/dev/null
          echo "zip=$ZIP" >> "$GITHUB_OUTPUT"

      - name: Upload to S3 (unique key)
        id: upload
        shell: bash
        env:
          EB_BUCKET: ${{ env.EB_BUCKET }}
        run: |
          set -euo pipefail
          KEY="Rcvo-backend/gh-${GITHUB_RUN_ID}-${GITHUB_RUN_ATTEMPT:-0}-$(date +%s).zip"
          aws s3 cp "${{ steps.pkg.outputs.zip }}" "s3://${EB_BUCKET}/${KEY}"
          echo "key=$KEY" >> "$GITHUB_OUTPUT"

      - name: Create EB Application Version (process) — always unique
        id: create_av
        shell: bash
        env:
          APP: ${{ env.APP_NAME }}
          REGION: ${{ env.AWS_REGION }}
          BUCKET: ${{ env.EB_BUCKET }}
          S3_KEY: ${{ steps.upload.outputs.key }}
        run: |
          set -euo pipefail
          LABEL="ops-deploy-${GITHUB_RUN_ID}-${GITHUB_RUN_ATTEMPT:-0}-$(date +%s)"
          echo "label=$LABEL" >> "$GITHUB_OUTPUT"

          aws elasticbeanstalk create-application-version --region "$REGION" \
            --application-name "$APP" \
            --version-label "$LABEL" \
            --source-bundle S3Bucket="$BUCKET",S3Key="$S3_KEY" \
            --process

      - name: Update Environment
        shell: bash
        env:
          REGION: ${{ env.AWS_REGION }}
          ENV: ${{ env.ENV_NAME }}
          LABEL: ${{ steps.create_av.outputs.label }}
        run: |
          set -euo pipefail
          aws elasticbeanstalk update-environment --region "$REGION" \
            --environment-name "$ENV" --version-label "$LABEL"

      - name: Wait until Ready/Green (≤15 min)
        shell: bash
        env:
          REGION: ${{ env.AWS_REGION }}
          ENV: ${{ env.ENV_NAME }}
          LABEL: ${{ steps.create_av.outputs.label }}
        run: |
          set -euo pipefail
          end=$((SECONDS+900))
          while [ $SECONDS -lt $end ]; do
            read -r S H V < <(aws elasticbeanstalk describe-environments --region "$REGION" \
              --environment-names "$ENV" --query 'Environments[0].[Status,Health,VersionLabel]' --output text)
            echo "Status=$S Health=$H Version=$V"
            if [[ "$S" == "Ready" && "$V" == "$LABEL" && "$H" =~ ^(Green|Yellow)$ ]]; then
              echo "✅ Déployé: $LABEL ($H)"; exit 0
            fi
            sleep 10
          done
          echo "❌ Timeout en attente de Ready/Green"; exit 1
