name: Deploy to Elastic Beanstalk

on:
  workflow_dispatch:
  push:
    branches: [ main ]

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: eu-west-3
      AWS_ACCOUNT_ID: "409818814260"
      EB_APP: Rcvo-backend
      EB_ENV: rcvo-backend-b
      EB_BUCKET: elasticbeanstalk-eu-west-3-409818814260
      # Nom d’archive et clé S3 uniques
      ZIP_NAME: app-${{ github.sha }}.zip
      S3_KEY: Rcvo-backend/${{ github.run_id }}-${{ github.run_attempt }}-${{ github.sha }}.zip
      VERSION_LABEL: ops-deploy-${{ github.run_id }}-${{ github.run_attempt }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::409818814260:role/GithubDeployRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Package app (zip)
        run: |
          zip -r "$ZIP_NAME" . -x ".git/*" ".github/*"

      - name: Upload to S3 (unique key)
        run: |
          aws s3 cp "$ZIP_NAME" "s3://${EB_BUCKET}/${S3_KEY}" --only-show-errors

      - name: Create EB Application Version (process) — always unique
        shell: bash
        run: |
          set -euo pipefail
          # On crée l'app version en pointant explicitement sur NOTRE zip S3
          # Si "already exists", on ignore proprement.
          set +e
          OUT=$(aws elasticbeanstalk create-application-version \
            --application-name "$EB_APP" \
            --version-label "$VERSION_LABEL" \
            --source-bundle S3Bucket="${EB_BUCKET}",S3Key="${S3_KEY}" \
            --process 2>&1)
          RC=$?
          set -e
          if [ $RC -ne 0 ] && ! grep -qi "already exists" <<<"$OUT"; then
            echo "$OUT"
            exit $RC
          fi
          echo "CreateApplicationVersion OK (ou déjà existante)"

      - name: Update Environment
        run: |
          aws elasticbeanstalk update-environment \
            --environment-name "$EB_ENV" \
            --version-label "$VERSION_LABEL"

      - name: Wait until Ready/Green (≤15 min)
        shell: bash
        run: |
          end=$((SECONDS+900))
          while [ $SECONDS -lt $end ]; do
            read -r S H V < <(aws elasticbeanstalk describe-environments \
              --region "$AWS_REGION" \
              --environment-names "$EB_ENV" \
              --query 'Environments[0].[Status,Health,VersionLabel]' --output text)
            echo "Status=$S Health=$H Version=$V"
            if [[ "$S" == "Ready" && "$V" == "$VERSION_LABEL" && "$H" =~ ^(Green|Yellow)$ ]]; then
              echo "✅ $VERSION_LABEL OK ($H)"; exit 0
            fi
            sleep 10
          done
          echo "⏳ Timeout d'attente de l'état Ready"; exit 1
