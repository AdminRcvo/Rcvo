name: 🛠️ Verify RCVo Infra
on:
  workflow_dispatch:
  schedule:
    - cron: '0 5 * * *'

permissions:
  id-token: write
  contents: read

jobs:
  verify:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.ASSISTANT_ROLE_ARN }}
          aws-region:    ${{ secrets.AWS_REGION }}

      - name: Verify Rcvo-Serveur is running t2.micro
        run: |
          INST=$(aws ec2 describe-instances \
            --region ${{ secrets.AWS_REGION }} \
            --filters "Name=tag:Name,Values=Rcvo-Serveur" "Name=instance-state-name,Values=running" \
            --query "Reservations[].Instances[].InstanceId" --output text)
          if [ -z "$INST" ]; then
            echo "::error ::Rcvo-Serveur not found or not running!"
            exit 1
          fi
          TYPE=$(aws ec2 describe-instances \
            --region ${{ secrets.AWS_REGION }} \
            --instance-ids $INST \
            --query "Reservations[].Instances[].InstanceType" --output text)
          if [ "$TYPE" != "t2.micro" ]; then
            echo "::error ::Rcvo-Serveur is $TYPE, expected t2.micro"
            exit 1
          fi

      - name: Check termination protection
        run: |
          DISABLE=$(aws ec2 describe-instance-attribute \
            --region ${{ secrets.AWS_REGION }} \
            --instance-id $INST \
            --attribute disableApiTermination \
            --query "DisableApiTermination.Value" --output text)
          if [ "$DISABLE" != "true" ]; then
            echo "::error ::API termination NOT disabled on Rcvo-Serveur"
            exit 1
          fi

      - name: Ensure no stray instances
        run: |
          OK="Rcvo-Serveur Rcvo-Backend-env"
          ALL=$(aws ec2 describe-instances \
            --region ${{ secrets.AWS_REGION }} \
            --filters "Name=instance-state-name,Values=running,stopped" \
            --query "Reservations[].Instances[].Tags[?Key=='Name'].Value|[]" \
            --output text)
          for NAME in $ALL; do
            if [[ ! " $OK " =~ " $NAME " ]]; then
              echo "::error ::Unexpected instance found: $NAME"
              exit 1
            fi
          done

      - name: Check Free Tier budget
        run: |
          SPEND=$(aws budgets describe-budgets \
            --account-id ${{ secrets.AWS_ACCOUNT_ID }} \
            --query "Budgets[?BudgetName=='rcvo-free-tier-budget'].CalculatedSpend.ActualSpend.Amount" \
            --output text)
          if (( $(echo "$SPEND > 20" | bc -l) )); then
            echo "::error ::Budget exceeded: $SPEND USD used"
            exit 1
          fi

      - name: Check S3 lifecycle on logs buckets
        run: |
          for BUCKET in rcvo-logs rcvo-backups; do
            aws s3api get-bucket-lifecycle-configuration \
              --bucket $BUCKET --region ${{ secrets.AWS_REGION }} \
              || echo "::error ::No lifecycle on bucket $BUCKET"
          done
