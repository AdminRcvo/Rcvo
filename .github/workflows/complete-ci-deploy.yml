name: Complete CI & Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node (safe)
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Detect Node project
        id: detect
        shell: bash
        run: |
          if [ -f package.json ]; then
            echo "has_node=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_node=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Install deps (safe)
        if: steps.detect.outputs.has_node == 'true'
        run: |
          if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
            npm ci --no-audit --no-fund
          else
            npm i  --no-audit --no-fund
          fi

      - name: Build (if exists)
        if: steps.detect.outputs.has_node == 'true'
        run: |
          if npm run | grep -q "^  build"; then
            npm run build --silent
          else
            echo "No build script, skipping."
          fi

      - name: Archive build (if dist exists)
        if: steps.detect.outputs.has_node == 'true'
        run: |
          if [ -d dist ]; then
            tar -czf build-artifact.tgz dist
          elif [ -d build ]; then
            tar -czf build-artifact.tgz build
          else
            echo "No dist/build folder, skipping archive."
          fi

      - name: Upload artifact
        if: steps.detect.outputs.has_node == 'true' && (hashFiles('build-artifact.tgz') != '')
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: build-artifact.tgz

  deploy-staging:
    name: Deploy to staging (skips if secrets missing)
    needs: build
    runs-on: ubuntu-latest
    if: ${{ secrets.DOCKER_USERNAME != '' && secrets.DOCKER_PASSWORD != '' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: .

      - name: Docker login
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build & Push Docker
        env:
          IMAGE: ${{ secrets.DOCKER_IMAGE || 'rcvo/app' }}
          TAG:   ${{ github.sha }}
        run: |
          docker build -t "$IMAGE:$TAG" .
          docker push "$IMAGE:$TAG"

      # Déploiement SSH optionnel : skippé si secrets absents
      - name: Deploy via SSH (optional)
        if: ${{ secrets.SSH_HOST != '' && secrets.SSH_USER != '' && secrets.SSH_KEY != '' }}
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            echo "Pull & restart with tag ${{ github.sha }}"
            # Place ici tes commandes (docker pull/run, systemctl, etc.)

  deploy-production:
    name: Deploy to production (manual)
    needs: [build]
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' }}  # manuel uniquement
    steps:
      - name: Guard
        run: echo "Production deploy is manual only. Re-run this workflow → pick this job."
