name: Complete CI/CD

# Déclenchement: push sur main, manuel et planifié quotidien à minuit UTC
on:
  push:
    branches:
      - main
  workflow_dispatch: {}
  schedule:
    - cron: '0 0 * * *'

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  build:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: pip install click requests pytest black isort

      - name: Lint and format
        run: |
          black --check .
          isort --check-only .

      - name: Run tests
        run: |
          if ls *test*.py tests >/dev/null 2>&1; then
            pytest --maxfail=1 --disable-warnings -q
          else
            echo "ℹ️ Aucun test détecté, skip"
          fi

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Build package
        run: python -m build

      - name: Publish package
        uses: pypa/gh-action-pypi-publish@v1.5.2
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}

  deploy-infra:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials for Infra
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.0

      - name: Run Terraform
        working-directory: infrastructure
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          terraform init
          terraform apply -auto-approve

  cost-optimize:
    name: AWS Cost Optimization
    runs-on: ubuntu-latest
    needs: deploy-infra
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Debug AWS Identity
        run: |
          aws sts get-caller-identity
          echo "Region: $AWS_REGION"

      - name: List running instances
        run: aws ec2 describe-instances --region $AWS_REGION --filters Name=instance-state-name,Values=running

      - name: Cleanup and downsize
        run: |
          INSTANCES=$(aws ec2 describe-instances --region $AWS_REGION --filters Name=instance-state-name,Values=running --query 'Reservations[].Instances[].InstanceId' --output text)
          for id in $INSTANCES; do
            TAGS=$(aws ec2 describe-tags --region $AWS_REGION --filters Name=resource-id,Values=$id --query 'Tags[].Key' --output text)
            if echo "$TAGS" | grep -E "Essential|Parametrage"; then
              continue
            fi
            TYPE=$(aws ec2 describe-instances --region $AWS_REGION --instance-ids $id --query 'Reservations[0].Instances[0].InstanceType' --output text)
            if [ "$TYPE" != "t2.micro" ]; then
              aws ec2 stop-instances --instance-ids $id --region $AWS_REGION
              aws ec2 wait instance-stopped --instance-ids $id --region $AWS_REGION
              aws ec2 modify-instance-attribute --instance-id $id --instance-type '{"Value":"t2.micro"}' --region $AWS_REGION
              aws ec2 start-instances --instance-ids $id --region $AWS_REGION
            fi
            aws ec2 terminate-instances --instance-ids $id --region $AWS_REGION
          done

invalidate-cdn:
    name: Invalidate CloudFront Cache
    runs-on: ubuntu-latest
    needs: cost-optimize
    steps:
      - name: Invalidate if configured
        env:
          DIST: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          if [ -n "$DIST" ]; then
            aws cloudfront create-invalidation --distribution-id $DIST --paths '/*' --region $AWS_REGION
          fi

  notify:
    name: Notify Slack
    runs-on: ubuntu-latest
    needs: invalidate-cdn
    steps:
      - name: Send Slack message
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          slack-message: "✅ Déploiement complet terminé"


