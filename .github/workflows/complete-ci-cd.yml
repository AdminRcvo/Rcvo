name: Complete CI/CD

# Ne s'exécute que sur la branche main ou manuellement
on:
  push:
    branches:
      - main
  workflow_dispatch: {}

permissions:
  contents: write    # pour publier des releases ou tag push
  packages: write    # si publication GitHub Packages
  id-token: write    # pour OIDC / AWS

jobs:
  build:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install .[dev]

      - name: Lint and format check
        run: |
          black --check .
          isort --check-only .

      - name: Run tests
        run: pytest --maxfail=1 --disable-warnings -q

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Build distribution
        run: |
          python -m build

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@v1.5.2
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}

  deploy-infra:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [build, publish-pypi]
    steps:
      - name: Checkout infra repo
        uses: actions/checkout@v3
        with:
          repository: AdminRcvo/Rcvo-infra
          path: infra

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.0

      - name: Terraform Init & Apply
        working-directory: infra
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          terraform init
          terraform apply -auto-approve

  invalidate-cdn:
    name: Invalidate CloudFront Cache
    runs-on: ubuntu-latest
    needs: deploy-infra
    env:
      CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
    if: ${{ env.CLOUDFRONT_DISTRIBUTION_ID != '' }}
    steps:
      - name: Call AWS CLI to invalidate
        run: |
          aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_DISTRIBUTION_ID --paths '/*'

  notify:
    name: Notify Slack
    runs-on: ubuntu-latest
    needs: invalidate-cdn
    steps:
      - name: Send success message
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          slack-message: "✅ Déploiement Rcvo v${{ github.ref_name }} terminé avec succès !"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
