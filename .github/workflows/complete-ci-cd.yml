name: Complete CI/CD

on:
  push:
    branches: [ main ]
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'

permissions:
  contents: write   # allow push of build artifacts
  packages: write   # allow publish to GitHub packages/PyPI
  id-token: write   # allow OIDC AWS auth

jobs:
  build:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - run: pip install click requests pytest black isort
      - run: |
          black --check .
          isort --check-only .
      - run: |
          if ls *test*.py tests >/dev/null 2>&1; then
            pytest --maxfail=1 --disable-warnings -q
          else
            echo "‚ÑπÔ∏è Aucun test d√©tect√©, skip"
          fi

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - run: python -m build
      - uses: pypa/gh-action-pypi-publish@v1.5.2
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}

  deploy-infra:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout infra
        uses: actions/checkout@v3
        with:
          path: infrastructure
      - name: Configure AWS credentials for Infra
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.0
      - name: Terraform Init & Apply
        working-directory: infrastructure
        run: |
          terraform init
          terraform apply -auto-approve

  cost-optimize:
    name: AWS Cost Optimization
    runs-on: ubuntu-latest
    needs: deploy-infra
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: List running instances
        run: |
          aws ec2 describe-instances --region $AWS_REGION --filters Name=instance-state-name,Values=running \
            --query 'Reservations[].Instances[].{ID:InstanceId,Type:InstanceType,Tags:Tags}'
      - name: Cleanup & Downsize
        run: |
          for id in $(aws ec2 describe-instances --region $AWS_REGION --filters Name=instance-state-name,Values=running --query 'Reservations[].Instances[].InstanceId' --output text); do
            keys=$(aws ec2 describe-tags --region $AWS_REGION --filters Name=resource-id,Values=$id --query 'Tags[].Key' --output text)
            if echo "$keys" | grep -Eq 'Essential|Parametrage'; then
              echo "üåü Keep $id"
              continue
            fi
            type=$(aws ec2 describe-instances --region $AWS_REGION --instance-ids $id --query 'Reservations[0].Instances[0].InstanceType' --output text)
            if [ "$type" != "t2.micro" ]; then
              aws ec2 stop-instances --instance-ids $id --region $AWS_REGION
              aws ec2 wait instance-stopped --instance-ids $id --region $AWS_REGION
              aws ec2 modify-instance-attribute --instance-id $id --instance-type '{"Value":"t2.micro"}' --region $AWS_REGION
              aws ec2 start-instances --instance-ids $id --region $AWS_REGION
            fi
          done

  invalidate-cdn:
    name: Invalidate CloudFront Cache
    runs-on: ubuntu-latest
    needs: cost-optimize
    env:
      CLOUDFRONT_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
    steps:
      - name: Skip if no distribution ID
        if: env.CLOUDFRONT_ID == ''
        run: echo "No distribution ID, skipping"
      - name: Create invalidation
        if: env.CLOUDFRONT_ID != ''
        run: |
          aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_ID --paths '/*'

  notify:
    name: Notify Slack
    runs-on: ubuntu-latest
    needs: invalidate-cdn
    steps:
      - uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          slack-message: "‚úÖ D√©ploiement CI/CD complet !"

