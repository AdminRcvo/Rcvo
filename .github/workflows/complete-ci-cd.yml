name: Complete CI CD

on:
  push:
    branches: [main]
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  build:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - run: pip install click requests pytest black isort
      - name: Lint and format
        run: |
          black --check .
          isort --check-only .
      - name: Run tests
        run: |
          if ls *test*.py tests >/dev/null 2>&1; then
            pytest --maxfail=1 --disable-warnings -q
          else
            echo "‚ÑπÔ∏è No tests found, skipping"
          fi

  publish-pypi:
    name: Publish to PyPI
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Build package
        run: python -m build
      - name: Publish package
        uses: pypa/gh-action-pypi-publish@v1.5.2
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}

    deploy-infra:
    name: Deploy Infrastructure
    needs: build
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.5.5'   # ‚Üê mis √† jour

      - name: Terraform Init & Apply
        working-directory: infrastructure/instances
        run: |
          terraform init
          terraform apply -auto-approve


  cost-optimize:
    name: AWS Cost Optimization
    needs: deploy-infra
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Cleanup & Downsize Instances
        run: |
          # 1) D√©terminer les 4 instances essentielles (serveur, lb, env, prod)
          roles=(Rcvo-Serveur Rcvo-Backend-lb Rcvo-Backend-env rcvo-backend-prod)
          keep_ids=()
          for role in "${roles[@]}"; do
            id=$(aws ec2 describe-instances \
              --filters Name=instance-state-name,Values=running Name=tag:Name,Values="$role" \
              --region "$AWS_REGION" \
              --query 'sort_by(Reservations[].Instances[], &LaunchTime)[0].InstanceId' \
              --output text)
            if [ "$id" != "None" ]; then
              echo "‚≠êÔ∏è Garder $role ‚Üí $id"
              keep_ids+=("$id")
            else
              echo "‚ö†Ô∏è Aucun running trouv√© pour $role"
            fi
          done

          # 2) Lister toutes les instances en running
          all_ids=($(aws ec2 describe-instances \
            --filters Name=instance-state-name,Values=running \
            --region "$AWS_REGION" \
            --query 'Reservations[].Instances[].InstanceId' --output text))

          # 3) Processus : conserver ou downsize/terminate
          for id in "${all_ids[@]}"; do
            if [[ " ${keep_ids[*]} " =~ " ${id} " ]]; then
              type=$(aws ec2 describe-instances --instance-ids "$id" --region "$AWS_REGION" --query 'Reservations[0].Instances[0].InstanceType' --output text)
              if [ "$type" != "t2.micro" ]; then
                echo "üîÑ Downsize $id de $type ‚Üí t2.micro"
                aws ec2 stop-instances --instance-ids "$id" --region "$AWS_REGION"
                aws ec2 wait instance-stopped --instance-ids "$id" --region "$AWS_REGION"
                aws ec2 modify-instance-attribute --instance-id "$id" --instance-type "{\"Value\":\"t2.micro\"}" --region "$AWS_REGION"
                aws ec2 start-instances --instance-ids "$id" --region "$AWS_REGION"
                aws ec2 wait instance-running --instance-ids "$id" --region "$AWS_REGION"
              else
                echo "‚úÖ $id est d√©j√† en t2.micro"
              fi
            else
              echo "üóëÔ∏è  Terminate $id"
              aws ec2 terminate-instances --instance-ids "$id" --region "$AWS_REGION"
              aws ec2 wait instance-terminated --instance-ids "$id" --region "$AWS_REGION"
            fi
          done

  invalidate-cdn:
    name: Invalidate CloudFront Cache
    needs: cost-optimize
    runs-on: ubuntu-latest
    env:
      CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
    steps:
      - name: Invalidate distribution (if configured)
        run: |
          if [ -z "$CLOUDFRONT_DISTRIBUTION_ID" ]; then
            echo "‚ÑπÔ∏è No distribution ID, skipping"
          else
            aws cloudfront create-invalidation --distribution-id "$CLOUDFRONT_DISTRIBUTION_ID" --paths '/*'
          fi

  notify:
    name: Notify Slack
    needs: invalidate-cdn
    runs-on: ubuntu-latest
    env:
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
    steps:
      - name: Send Slack message
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          slack-message: "‚úÖ D√©ploiement CI/CD complet !"
