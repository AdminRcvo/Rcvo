name: RCVO — Build & Deploy EB (prod)

on:
  workflow_dispatch:
    inputs:
      version_label:
        description: "Label personnalisé (optionnel)"
        required: false
        default: ""

permissions:
  id-token: write    # OIDC → STS
  contents: read

env:
  AWS_REGION: eu-west-3
  ROLE_ARN: arn:aws:iam::409818814260:role/GithubDeployRole
  EB_APP: Rcvo-backend
  EB_ENV: rcvo-backend-b
  EB_BUCKET: elasticbeanstalk-eu-west-3-409818814260
  RCVO_DOMAIN: rcvo-crm-auto.com

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install & build
        shell: bash
        run: |
          set -euo pipefail
          if [ -f package-lock.json ]; then npm ci; else npm install; fi
          if jq -e '.scripts.build?' package.json >/dev/null 2>&1; then npm run build || true; fi

      - name: Préparer le bundle EB (+ Nginx headers/redirects)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p ".platform/nginx/conf.d"
          cat > .platform/nginx/conf.d/00-rcvo-env.conf <<'NGINX'
          proxy_hide_header X-RCVO-Env;
          add_header X-RCVO-Env "prod-app" always;
          NGINX
          cat > .platform/nginx/conf.d/01-https-canonical.conf <<NGINX
          if (\$http_x_forwarded_proto != "https") { return 301 https://${{ env.RCVO_DOMAIN }}\$request_uri; }
          if (\$host ~* ^www\.${{ env.RCVO_DOMAIN }}\$) { return 301 https://${{ env.RCVO_DOMAIN }}\$request_uri; }
          NGINX
          zip -qr /tmp/bundle.zip .

      - name: Upload vers S3
        id: upload
        shell: bash
        run: |
          set -euo pipefail
          STAMP=$(date -u +%Y%m%d-%H%M%S)-$RANDOM
          LABEL="${{ github.event.inputs.version_label }}"
          if [ -z "$LABEL" ]; then LABEL="ci-${STAMP}-${GITHUB_SHA::7}"; fi
          KEY="${{ env.EB_APP }}/${LABEL}.zip"
          aws s3 cp /tmp/bundle.zip "s3://${{ env.EB_BUCKET }}/${KEY}" --acl bucket-owner-full-control
          echo "label=$LABEL" >> $GITHUB_OUTPUT
          echo "key=$KEY"     >> $GITHUB_OUTPUT

      - name: EB - Create ApplicationVersion
        run: |
          aws elasticbeanstalk create-application-version \
            --application-name "${{ env.EB_APP }}" \
            --version-label "${{ steps.upload.outputs.label }}" \
            --source-bundle S3Bucket="${{ env.EB_BUCKET }}",S3Key="${{ steps.upload.outputs.key }}" \
            --process

      - name: EB - Update Environment
        run: |
          aws elasticbeanstalk update-environment \
            --environment-name "${{ env.EB_ENV }}" \
            --version-label "${{ steps.upload.outputs.label }}"

      - name: Wait Ready/Green
        shell: bash
        run: |
          set -euo pipefail
          end=$((SECONDS+1800))
          while [ $SECONDS -lt $end ]; do
            read -r S H V < <(aws elasticbeanstalk describe-environments \
              --environment-names "${{ env.EB_ENV }}" \
              --query 'Environments[0].[Status,Health,VersionLabel]' --output text)
            echo "EB Status=$S Health=$H Version=$V"
            if [[ "$S" == "Ready" && "$V" == "${{ steps.upload.outputs.label }}" && "$H" =~ ^(Green|Yellow)$ ]]; then
              echo "✅ Déployé: $V ($H)"; exit 0; fi
            sleep 10
          done
          echo "⚠️ Timeout en attente de Ready/Green"; exit 1
