name: EC2 Cleanup & Downsizing

on:
  workflow_dispatch:
  schedule:
    - cron: '0 2 * * *'  # chaque jour √† 02:00 UTC

jobs:
  cleanup:
    name: Nettoyage et redimensionnement des instances
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: D√©terminer les instances √† garder
        id: keep
        run: |
          roles=(Rcvo-Serveur Rcvo-Backend-lb Rcvo-Backend-env rcvo-backend-prod)
          keep_ids=()
          for role in "${roles[@]}"; do
            id=$(aws ec2 describe-instances \
              --filters Name=instance-state-name,Values=running Name=tag:Name,Values="$role" \
              --query 'sort_by(Reservations[].Instances[], &LaunchTime)[-1].InstanceId' \
              --output text --region $AWS_REGION)
            if [[ "$id" != "None" ]]; then
              echo "‚≠êÔ∏è Garder $role ‚Üí $id"
              keep_ids+=("$id")
            else
              echo "‚ö†Ô∏è Aucun running trouv√© pour $role"
            fi
          done
          echo "::set-output name=ids::${keep_ids[*]}"

      - name: Cleanup & Downsize
        run: |
          keep_ids=(${{ steps.keep.outputs.ids }})
          echo "Instances √† garder: ${keep_ids[*]}"

          all_ids=($(aws ec2 describe-instances \
            --filters Name=instance-state-name,Values=running \
            --query 'Reservations[].Instances[].InstanceId' \
            --output text --region $AWS_REGION))

          for id in "${all_ids[@]}"; do
            if [[ " ${keep_ids[*]} " =~ " $id " ]]; then
              # Si pas en t2.micro ‚Üí downsize
              type=$(aws ec2 describe-instances \
                --instance-ids "$id" \
                --query 'Reservations[0].Instances[0].InstanceType' \
                --output text --region $AWS_REGION)
              if [[ "$type" != "t2.micro" ]]; then
                echo "üîÑ Downsize $id de $type ‚Üí t2.micro"
                aws ec2 stop-instances --instance-ids "$id" --region "$AWS_REGION"
                aws ec2 wait instance-stopped --instance-ids "$id" --region "$AWS_REGION"
                aws ec2 modify-instance-attribute --instance-id "$id" --instance-type "{\"Value\":\"t2.micro\"}" --region "$AWS_REGION"
                aws ec2 start-instances --instance-ids "$id" --region "$AWS_REGION"
                aws ec2 wait instance-running --instance-ids "$id" --region "$AWS_REGION"
              else
                echo "‚úÖ $id est d√©j√† en t2.micro"
              fi
            else
              echo "üóëÔ∏è Terminate $id"
              aws ec2 terminate-instances --instance-ids "$id" --region "$AWS_REGION"
              aws ec2 wait instance-terminated --instance-ids "$id" --region "$AWS_REGION"
            fi
          done
