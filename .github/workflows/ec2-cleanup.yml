name: "EC2 Cleanup & Downsizing"
on:
  schedule:
    - cron: '0 4 * * 1'  # tous les lundis à 4h UTC
  workflow_dispatch:
env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
jobs:
  cleanup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Cleanup & Downsize
        run: |
          # 1) Déterminer 4 instances essentielles
          roles=(Rcvo-Serveur Rcvo-Backend-lb Rcvo-Backend-env rcvo-backend-prod)
          keep_ids=()
          for role in "${roles[@]}"; do
            id=$(aws ec2 describe-instances \
              --filters Name=instance-state-name,Values=running Name=tag:RcvoRole,Values="$role" \
              --region "$AWS_REGION" --query 'Reservations[0].Instances[0].InstanceId' --output text)
            [[ "$id" != "None" ]] && keep_ids+=("$id")
          done

          # 2) Lister toutes les instances "running"
          all_ids=( $(aws ec2 describe-instances \
            --filters Name=instance-state-name,Values=running \
            --region "$AWS_REGION" --query 'Reservations[].Instances[].InstanceId' --output text) )

          # 3) Conserver, downsizer ou terminer
          for id in "${all_ids[@]}"; do
            if [[ " ${keep_ids[*]} " =~ " $id " ]]; then
              type=$(aws ec2 describe-instances --instance-ids "$id" --region "$AWS_REGION" \
                --query 'Reservations[0].Instances[0].InstanceType' --output text)
              if [ "$type" != "t2.micro" ]; then
                aws ec2 stop-instances --instance-ids "$id" --region "$AWS_REGION"
                aws ec2 wait instance-stopped --instance-ids "$id" --region "$AWS_REGION"
                aws ec2 modify-instance-attribute --instance-id "$id" \
                  --instance-type '{"Value":"t2.micro"}' --region "$AWS_REGION"
                aws ec2 start-instances --instance-ids "$id" --region "$AWS_REGION"
              fi
            else
              aws ec2 terminate-instances --instance-ids "$id" --region "$AWS_REGION"
            fi
          done
