name: Vehicle Categorization

on:
  workflow_dispatch:
    inputs:
      categories_path:
        description: "Chemin du fichier cat√©gories.json (optionnel)"
        required: false
        default: ""
  push:
    branches: [ main ]
    paths:
      - '**/package.json'
      - '**/categories.json'
      - 'qcm/**'
      - 'src/vehicles/**'
      - 'scripts/**'
      - '.github/workflows/vehicle-categorization.yml'

jobs:
  categorize:
    name: G√©n√©rer la table de correspondance
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Installer Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      # 1) Localiser package.json avec script build:mapping (si jamais il existe)
      - name: Localiser package.json avec script build:mapping
        id: find_pkg
        shell: bash
        run: |
          set -euo pipefail
          FOUND_DIR=""
          while IFS= read -r file; do
            if node -e "const fs=require('fs');const j=JSON.parse(fs.readFileSync('$file','utf8'));process.exit(j.scripts&&j.scripts['build:mapping']?0:1)"; then
              FOUND_DIR="$(dirname "$file")"
              break
            fi
          done < <(git ls-files '**/package.json' || true)
          if [ -n "$FOUND_DIR" ]; then
            echo "dir=$FOUND_DIR" >> "$GITHUB_OUTPUT"
            echo "found=true"     >> "$GITHUB_OUTPUT"
          else
            echo "found=false"    >> "$GITHUB_OUTPUT"
          fi

      # 2) Localiser le fichier cat√©gories.json (ou prendre l'input manuel)
      - name: Localiser fichier cat√©gories
        id: find_cats
        shell: bash
        run: |
          set -euo pipefail
          # priorit√© √† l'input manuel
          MANUAL="${{ github.event.inputs.categories_path }}"
          if [ -n "$MANUAL" ] && [ -f "$MANUAL" ]; then
            echo "path=$MANUAL" >> "$GITHUB_OUTPUT"
            echo "found=true"   >> "$GITHUB_OUTPUT"
            exit 0
          fi

          CANDIDATES=(
            "qcm/categories.json"
            "data/categories.json"
            "config/categories.json"
            "src/**/categories.json"
            "**/categories.json"
          )
          FOUND=""
          for pat in "${CANDIDATES[@]}"; do
            while IFS= read -r f; do
              if node -e "const fs=require('fs');try{const j=JSON.parse(fs.readFileSync(process.argv[1],'utf8'));process.exit(Array.isArray(j.categories)?0:1)}catch{process.exit(1)}" "$f"; then
                FOUND="$f"; break 2
              fi
            done < <(git ls-files "$pat" || true)
          done

          if [ -n "$FOUND" ]; then
            echo "path=$FOUND"  >> "$GITHUB_OUTPUT"
            echo "found=true"   >> "$GITHUB_OUTPUT"
          else
            echo "found=false"  >> "$GITHUB_OUTPUT"
            echo "note=Place un fichier JSON du type: { \"categories\":[{ \"name\":\"Citadine\",\"models\":[] }, ... ] }" >> "$GITHUB_OUTPUT"
          fi

      # 3A) Si build:mapping existe ‚Üí ex√©cuter npm
      - name: Installer d√©pendances (safe)
        if: ${{ steps.find_pkg.outputs.found == 'true' && steps.find_cats.outputs.found == 'true' }}
        working-directory: ${{ steps.find_pkg.outputs.dir }}
        run: |
          if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
            npm ci --no-audit --no-fund
          else
            npm i  --no-audit --no-fund
          fi

      - name: G√©n√©rer le mapping (npm run build:mapping)
        if: ${{ steps.find_pkg.outputs.found == 'true' && steps.find_cats.outputs.found == 'true' }}
        working-directory: ${{ steps.find_pkg.outputs.dir }}
        env:
          RCVO_CATEGORIES_FILE: ${{ steps.find_cats.outputs.path }}
        run: npm run build:mapping --silent

      # 3B) Fallback sans npm
      - name: G√©n√©rer le mapping (fallback)
        if: ${{ steps.find_pkg.outputs.found != 'true' && steps.find_cats.outputs.found == 'true' }}
        env:
          CATS_FILE: ${{ steps.find_cats.outputs.path }}
        run: |
          set -euo pipefail
          OUT="src/vehicles/mapping.json"
          mkdir -p "$(dirname "$OUT")"
          node - <<'JS' "$CATS_FILE" "$OUT"
          import fs from 'fs';
          const catsPath = process.argv[2], outPath = process.argv[3];
          const data = JSON.parse(fs.readFileSync(catsPath,'utf8'));
          if (!Array.isArray(data.categories)) { throw new Error("format attendu {categories:[...]}" ); }
          for (const c of data.categories) {
            if (typeof c.name!=='string' || !Array.isArray(c.models)) throw new Error("chaque cat√©gorie = {name:string, models:string[]}");
          }
          fs.writeFileSync(outPath, JSON.stringify(data, null, 2));
          console.log(`‚úÖ mapping -> ${outPath}`);
          JS

      # 3C) Rien trouv√© ‚Üí sortie propre, succ√®s
      - name: Rien √† faire (cat√©gories non trouv√©es)
        if: ${{ steps.find_cats.outputs.found != 'true' }}
        run: |
          echo "‚ÑπÔ∏è Aucun fichier cat√©gories.json valide trouv√©."
          echo "   ‚ûú Ajoute par ex. 'qcm/categories.json' avec: { \"categories\": [ { \"name\": \"Citadine\", \"models\": [] }, ... ] }"
          echo "   ‚ûú Ou relance manuellement en passant un chemin via 'categories_path'."

      # 4) Commit uniquement si modifi√©
      - name: Commit & push mapping (si modifi√©)
        run: |
          FILE="src/vehicles/mapping.json"
          if [ ! -f "$FILE" ]; then
            echo "Pas de mapping g√©n√©r√© (aucun fichier cat√©gories) ‚Äî OK."
            exit 0
          fi
          if git diff --quiet --exit-code -- "$FILE"; then
            echo "Aucun changement dans $FILE."
            exit 0
          fi
          git config user.name  "github-actions"
          git config user.email "actions@github.com"
          git add "$FILE"
          git commit -m "[skip ci] üîÑ MAJ mapping v√©hicules"
          git push
