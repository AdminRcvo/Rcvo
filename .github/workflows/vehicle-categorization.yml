name: Vehicle Categorization

on:
  workflow_dispatch: {}
  push:
    branches: [ main ]
    paths:
      - 'qcm/**'
      - 'src/vehicles/**'
      - 'scripts/**'
      - '**/package.json'
      - '.github/workflows/vehicle-categorization.yml'

jobs:
  categorize:
    name: G√©n√©rer la table de correspondance
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Installer Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      # Trouver un package.json qui d√©clare "build:mapping"
      - name: Localiser package.json avec script build:mapping
        id: find_pkg
        shell: bash
        run: |
          set -euo pipefail
          FOUND_DIR=""
          # Liste tous les package.json suivis par git
          while IFS= read -r file; do
            # V√©rifie via Node si scripts["build:mapping"] existe
            if node -e "const fs=require('fs');const p='$file';const j=JSON.parse(fs.readFileSync(p,'utf8'));process.exit(j.scripts&&j.scripts['build:mapping']?0:1)"; then
              FOUND_DIR="$(dirname "$file")"
              echo "‚úî Script build:mapping trouv√© dans: $FOUND_DIR"
              break
            fi
          done < <(git ls-files '**/package.json' || true)
          if [ -n "$FOUND_DIR" ]; then
            echo "dir=$FOUND_DIR" >> "$GITHUB_OUTPUT"
            echo "found=true"     >> "$GITHUB_OUTPUT"
          else
            echo "found=false"    >> "$GITHUB_OUTPUT"
          fi

      # Chemin du mapping de sortie (unique pour tout le repo)
      - name: D√©finir chemin de sortie
        run: echo "MAP_OUT=src/vehicles/mapping.json" >> $GITHUB_ENV

      # Branche A : on a trouv√© un package.json avec build:mapping ‚Üí run npm
      - name: Installer d√©pendances (safe)
        if: ${{ steps.find_pkg.outputs.found == 'true' }}
        working-directory: ${{ steps.find_pkg.outputs.dir }}
        run: |
          if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
            npm ci --no-audit --no-fund
          else
            npm i  --no-audit --no-fund
          fi

      - name: G√©n√©rer le mapping (npm run build:mapping)
        if: ${{ steps.find_pkg.outputs.found == 'true' }}
        working-directory: ${{ steps.find_pkg.outputs.dir }}
        run: npm run build:mapping --silent

      # Branche B : aucun package.json ad√©quat ‚Üí fallback sans npm
      - name: G√©n√©rer le mapping (fallback sans npm)
        if: ${{ steps.find_pkg.outputs.found != 'true' }}
        run: |
          set -euo pipefail
          CATS="qcm/categories.json"
          OUT="$MAP_OUT"
          [ -f "$CATS" ] || { echo "‚ùå Fichier cat√©gories introuvable: $CATS"; exit 2; }
          mkdir -p "$(dirname "$OUT")"
          node - <<'JS' "$CATS" "$OUT"
          import fs from 'fs';
          const catsPath = process.argv[2], outPath = process.argv[3];
          let spec;
          try { spec = JSON.parse(fs.readFileSync(catsPath,'utf8')); }
          catch(e){ console.error(`‚ùå JSON invalide dans ${catsPath}: ${e.message}`); process.exit(2); }
          if (!Array.isArray(spec.categories)) {
            console.error("‚ùå Attendu: { categories:[{name,models[]},...], default? }");
            process.exit(2);
          }
          for (const c of spec.categories) {
            if (typeof c.name!=='string' || !Array.isArray(c.models)) {
              console.error("‚ùå Chaque cat√©gorie: {name:string, models:string[]}");
              process.exit(2);
            }
          }
          fs.writeFileSync(outPath, JSON.stringify(spec, null, 2));
          console.log(`‚úÖ mapping √©crit -> ${outPath}`);
          JS

      # Commit uniquement si le mapping a chang√©
      - name: Commit & push mapping (si modifi√©)
        run: |
          FILE="$MAP_OUT"
          if [ ! -f "$FILE" ]; then
            echo "‚ùå Fichier attendu non trouv√©: $FILE"; exit 2;
          fi
          if git diff --quiet --exit-code -- "$FILE"; then
            echo "‚ÑπÔ∏è Aucun changement dans $FILE, rien √† committer."
            exit 0
          fi
          git config user.name  "github-actions"
          git config user.email "actions@github.com"
          git add "$FILE"
          git commit -m "[skip ci] üîÑ Mise √† jour du mapping v√©hicules"
          git push
