name: Cost Optimize - Daily Check

# Runs daily and on manual trigger
on:
  schedule:
    - cron: '0 7 * * *'      # every day at 07:00 UTC
  workflow_dispatch:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  cost-analyze:
    name: Cost analysis (safe)
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      # Do NOT use "||" in expressions. If the secret is unset it will be empty.
      S3_BUCKET: ${{ secrets.S3_BUCKET }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --no-cache-dir boto3 pyyaml

      - name: Validate workflow YAML files (quick parse)
        run: |
          python - <<'PY'
          import sys, yaml, glob
          ok = True
          for f in glob.glob('.github/workflows/*.yml') + glob.glob('.github/workflows/*.yaml'):
              try:
                  yaml.safe_load(open(f, 'r'))
              except Exception as e:
                  print(f"YAML PARSE ERROR in {f}: {e}", file=sys.stderr)
                  ok = False
          if not ok:
              sys.exit(2)
          print("All workflow YAML parse OK")
          PY

      - name: Gather AWS account info (read-only)
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          set -euo pipefail
          echo "AWS CLI version: $(aws --version 2>&1 || true)"
          echo "Listing account identity..."
          aws sts get-caller-identity --output json || true

      - name: Optional: Run cost estimation script if present
        run: |
          set -euo pipefail
          if [ -x "./scripts/cost-optimize.sh" ]; then
            echo "Found ./scripts/cost-optimize.sh — executing (safe mode)"
            ./scripts/cost-optimize.sh || echo "script failed (allowed)"
          else
            echo "No cost optimization script found at ./scripts/cost-optimize.sh — skipping"
          fi

      - name: Quick S3 storage-class check (non-destructive)
        # run this step only if S3_BUCKET secret is non-empty
        if: ${{ secrets.S3_BUCKET != '' }}
        env:
          S3_BUCKET: ${{ secrets.S3_BUCKET }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          set -euo pipefail
          KEY_BASE="cost-optimize-check-$(date -u +%Y%m%dT%H%M%SZ)-${GITHUB_RUN_ID}"
          TEMP_KEY="tmp/${KEY_BASE}.txt"
          ARCHIVE_KEY="archive/${KEY_BASE}.txt"
          echo "ping" > /tmp/${KEY_BASE}.txt

          echo "Uploading test object to s3://${S3_BUCKET}/${TEMP_KEY}"
          aws s3 cp /tmp/${KEY_BASE}.txt s3://${S3_BUCKET}/${TEMP_KEY} --region "${AWS_REGION}" --only-show-errors

          # copy to archive/ explicitly with storage-class STANDARD (server side)
          aws s3 cp s3://${S3_BUCKET}/${TEMP_KEY} s3://${S3_BUCKET}/${ARCHIVE_KEY} --region "${AWS_REGION}" --storage-class STANDARD --only-show-errors

          # read head-object; StorageClass may be missing (null) for STANDARD
          SC=$(aws s3api head-object --bucket "${S3_BUCKET}" --key "${ARCHIVE_KEY}" --query 'StorageClass' --output text --region "${AWS_REGION}" || echo "")
          echo "Raw StorageClass read: '${SC}'"

          # Accept empty/None/null as STANDARD (some S3 APIs/regions return null/None for STANDARD)
          if [ "${SC}" = "STANDARD" ] || [ -z "${SC}" ] || [ "${SC}" = "None" ] || [ "${SC}" = "null" ]; then
            echo "StorageClass OK (interpreted as STANDARD)."
          else
            echo "WARNING: StorageClass is not STANDARD: ${SC}"
          fi

          # cleanup test objects (best-effort)
          aws s3 rm s3://${S3_BUCKET}/${TEMP_KEY} --region "${AWS_REGION}" >/dev/null 2>&1 || true
          aws s3 rm s3://${S3_BUCKET}/${ARCHIVE_KEY} --region "${AWS_REGION}" >/dev/null 2>&1 || true
          rm -f /tmp/${KEY_BASE}.txt || true

      - name: Report summary
        run: |
          echo "Cost Optimize job finished. No destructive actions performed by default."
